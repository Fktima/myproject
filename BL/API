#!/usr/bin/python3
"""
------------------------------------------------------------------------------------------------------------------------
This is the business logic API
version: 1.0
Author: Miruna Serian
------------------------------------------------------------------------------------------------------------------------
"""
class Search:
    """ Class that retrieves the query given by the user
    either as an AccessionCode, protein product name, Chromosomal location
    or GenBank identifier
    """

    def byAccessionCode(accession_code):
        return accession_code

    def byProteinProduct(protein_name):
        return protein_name

    def byChromosomalLoc(chromosomal_loc):
        return chromosomal_loc

    def byGenBankIdentifier(genBank_id):
        return genBank_id


class Display:

    def displayDNASeq(query):
        """ displays DNA seq associated with the query"""
        return (DNA_seq)

    def displayAASeq(query):
        """ d
        isplays the amino acid sequence
        parameters: query, type string
        returns the amino acid sequence"""
        return aminoacid_sequence

    def displayCodingSeq(query):
        """
        displays the coding region
        Parameters: query, type string
        Ouput: CDS
        """
        return CDS

    def displayCodonUsage(query):
        """
        displays the codon Usage
        parameters: query, type string
        output: frequencies, type dictionary
        """
        return codon_usage

    def displayRestrictionSiteEcorI(query):
        """
        displays the sticky-end restriction enzyme sites for EcorI
        :return: restr_Site_EcorI
        type: string
        """
        return restr_site_EcorI

    def displayRestrictionSiteBamHI(query):
        """
        displays the sticky-end restriction enzyme sites for  BamHI
        :return: restr_Site_BamHI
        type: string
        """
        return restr_site_BamHI

    def displayRestrictionSiteBsuMI(query):
        """
        displays the sticky-end restriction enzyme sites for BsumI
        # :return: restr_Site_BsumI
        type: string
        """
        return restr_site_BsuMI

    def summary(query):
        """
        displays the summary of DNA sequency, Aminoacid Sequence,
        coding sequence and codon usage associated with the query.
        Parameters: query
        Output: summary, type dictionary
        """

        summary = {
            "dna_seq": Display.displayDNASeq(query),
            "aa_seq": Display.displayAASeq(query),
            "coding_seq": Display.displayCodingSeq(query),
            "codon_usage": Display.displayCodonUsage(query),
            "restriction_site_EcorI" : Display.displayRestrictionSiteEcorI(query),
            "restriction_site_BamHI": Display.displayRestrictionSiteBamHI(query),
            "restriction_site_BsuMI": Display.displayRestrictionSiteBsuMI(query)
        }
        return summary


def summaryUsingAccessionCode(accession_code):
    """
    Dislays the summary associated with the accession code provided.
    Parameters: accession code
    Output: a_summary, type dictionary
    """
    a_query = Search.byAccessionCode(accession_code)
    a_summary = Display.summary(a_query)
    return a_summary


def summaryUsingProteinProduct(protein_name):
    """
    Dislays the summary associated with the protein name provided.
    Parameters: protein_name
    Output: a_summary, type dictionary
    """
    a_query = Search.byProteinProduct(protein_name)
    a_summary = Display.summary(a_query)
    return a_summary


def summaryUsingChromosomalLoc(chromosomal_loc):
    """
    Dislays the summary associated with the chromosomal location provided.
    Parameters: chromosomal_loc
    Output: a_summary, type dictionary
    """
    a_query = Search.byChromosomalLoc(chromosomal_loc)
    a_summary = Display.summary(a_query)
    return a_summary


def summaryUsingGenBankIdentifier(genBank_id):
    """
    Dislays the summary associated with the GenBank ID provided.
    Parameters: genBank_id
    Output: a_summary, type dictionary
    """
    a_query = Search.byGenBankIdentifier(genBank_id)
    a_summary = Display.summary(a_query)
    return a_summary


class codonUsage:
    """ workouts the codon usage and displays is as dictionary
    which will be further converted into a table"""
    def __init(self, dna_seq):
        self.dna_seq=dna_seq

    def codons(self):
        codons=[self[i:i+3] for i in range(0, len(self), 3)]
        return(codons)

    def codonFreq(self):
        the_codons = codonUsage.codons(self)
        codon_freq={}
        for codon in the_codons:
            codon_freq[codon]=the_codons.count(codon)
        return(codon_freq)



# This is the dummy code and data #

an_accession_code = '1234'
protein_name = 'protein1'
DNA_seq = 'ATATATGATGCa'
aminoacid_sequence = 'this is an amino acid sequence '
CDS = 'coding se'
codon_usage = ' this is a codon sequenc'
chromosomal_loc = '18iq'
genBank_id = '678'
restr_site_EcorI = 'restriction site EcorI'
restr_site_BamHI = 'restriction site BamHI'
restr_site_BsuMI = 'restriction site BsuMI'
a_try = summaryUsingAccessionCode(an_accession_code)
a_try2 = summaryUsingProteinProduct(protein_name)
a_try3 = summaryUsingChromosomalLoc(chromosomal_loc)
a_try4 = summaryUsingGenBankIdentifier(genBank_id)


codon_arraye=codonUsage.codons(DNA_seq)
codon_usage = codonUsage.codonFreq(DNA_seq)
print(codon_usage)
