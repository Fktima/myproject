#!/usr/bin/python3

"""
------------------------------------------------------------------------------------------------------------------------
This is the business logic API
Author: Miruna Serian
------------------------------------------------------------------------------------------------------------------------
"""
import dummy as DB #using the dumy code instead of the DB api

class Search:
    """ Class that retrieves the query given by the user
    either as an AccessionCode, protein product name, Chromosomal location
    or GenBank identifier
    """

    def by_accession_code(accession_code):
        return DB.get_gene_entry()

    def by_protein_product(protein_name):
        return DB.get_gene_entry()

    def by_chromosomal_loc(chromosomal_loc):
        return DB.get_gene_entry()

    def by_genbank_identifier(genBank_id):
        return DB.get_gene_entry()
"""
------------------------------------------------------------------------------------------------------------------------
This is used by the front end to display information about the gene
------------------------------------------------------------------------------------------------------------------------
"""


def get_dna_seq(query):
    """ displays DNA seq associated with the query"""
    return DB.get_gene_entry(query)['DNA_seq']

def get_aminoacid_seq(query):
    """ displays the amino acid sequence
     parameters: query, type string
    returns the amino acid sequence"""
    return DB.get_gene_entry(query)['aminoacid_sequence']

def get_coding_seq(query):
    """
    displays the coding region
    Parameters: query, type string
    Ouput: CDS
    """
    return DB.get_gene_entry(query)['CDS']

def get_codon_usage(query):
    """
    displays the codon Usage
    parameters: query, type string
    output: frequencies, type dictionary
    """
    return codonUsage.codon_frequency(get_dna_seq(query))

def get_restriction_site_EcorI(query):
    """
    displays the sticky-end restriction enzyme sites for EcorI
    :return: restr_Site_EcorI
    type: string
    """
    return DB.restr_site_EcorI

def get_restriction_site_BamHI(query):
    """
    displays the sticky-end restriction enzyme sites for  BamHI
    :return: restr_Site_BamHI
    type: string
        """
    return DB.restr_site_BamHI

def get_restriction_site_BsuMI(query):
    """
    displays the sticky-end restriction enzyme sites for BsumI
    # :return: restr_Site_BsumI
    type: string
    """
    return DB.restr_site_BsuMI




class codonUsage:
    """ workouts the codon usage and displays is as dictionary
    which will be further converted into a table"""
    def __init(self, dna_seq):
        self.dna_seq=dna

    def codons(self):
        codons = [self[i:i + 3] for i in range(0, len(self), 3)]
        for i in range(0, len(codons)):
            if len(codons[i]) < 3:
                del codons[i]
        return(codons)

    def codon_frequency(self):
        the_codons = codonUsage.codons(self)
        codon_freq={}
        for codon in the_codons:
            codon_freq[codon]=the_codons.count(codon)
        return(codon_freq)

a_try=get_codon_usage('678')
print(a_try)


